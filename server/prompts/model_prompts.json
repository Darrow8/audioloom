{
    "podcast": {
        "type": "podcast",
        "raw_instructions": "You will receive a document that contains an informative article on a subject. \nThe document starts at \"DOCUMENT_START\" and ends at \"DOCUMENT_END\".\nYour job is to convert this article into a script for a podcast that discusses the article. The podcast is called Audioloom and the podcast host is Adam Page. The listener has not read the article, so you must explain the content of the article and any important supplemental information. Try to tell a story in covering the main ideas of the article. In addition, discuss each of the ideas you introduced in-depth.\nIf it is relevant and useful to the podcast, the host can invite guests onto the podcast and ask them questions or discuss ideas with them. The host and guests can have differing opinions on the issues or they can agree with one another. Make sure all conversations and discussions sound natural, as if they were between real people talking about the issues. Do not use unnecessary formal language or write overly structured sentences. \nInclude sound effects and background music cues to make the podcast more entertaining. Start the podcast by saying \"Welcome to Audioloom. I’m your host, Adam Page\" and end it by saying \"Thank you for listening, I’m Adam Page from Audioloom. We hope you’ve enjoyed this podcast. If you have, please share us with a friend. See you next time.\".\nWhen a new character is going to speak, the host should introduce them by their name and credentials. When a character has a speaking line, specify their name and optionally add an adjective to describe their emotions in the JSON. \nEach line in the script should be either a sound effect, background music, or a person speaking.\nYou will output a JSON object containing one key-value pair with the key `lines`. The value of `lines` will be an array where each element in the array is an object of the type `line`.\nA `line` can follow one of two different formats:\n\n1. For a character speaking:\n    {\n        \"kind\": \"character\",\n        \"character\": \"<character name>\",\n        \"dialogue\": \"<dialogue>\",\n        \"adjective\": \"<adjective>\"\n    }\n\n2. For music cues:\n    {\n        \"kind\": \"music\",\n        \"type\": \"<Background Music or Sound Effect>\",\n        \"music_description\": \"<description>\"\n    }\n",
        "response_type": "file",
        "GPTModel": {
            "version": "gpt-4o",
            "tokenLimit": 128000
        }
    },
    "clean": {
        "type": "clean",
        "raw_instructions": "You will receive a document that contains an informative article. \nThe document starts at 'DOCUMENT_START' and ends at 'DOCUMENT_END'.\nRemove any table of contents, graphs, images, citations, or other information that does not relate to the text of the article. \nRemove unnecessary blank lines, gibberish, or other non-text content as well.\nDo not remove any content from the document, only the things listed above. \nBelow is the article.\n",
        "response_type": "file",
        "GPTModel": {
            "version": "gpt-4o-mini",
            "tokenLimit": 128000
        }
    },
    "title": {
        "type": "title",
        "raw_instructions": "You will receive a document that contains an informative article. \nThe document starts at 'DOCUMENT_START' and ends at 'DOCUMENT_END'. Your job is to create a short and exciting title for the article. Make the title less than 6 words. \nBelow is the article.\n",
        "response_type": "string",
        "GPTModel": {
            "version": "gpt-4o-mini",
            "tokenLimit": 128000
        }
    },
    "author": {
        "type": "author",
        "raw_instructions": "You will receive a document that contains an informative article. \nThe document starts at 'DOCUMENT_START' and ends at 'DOCUMENT_END'. Your job is to return the author or authors of the article. Only return the authors names, no other text. Only write up to 15 words. If you cannot determine the author, return “Unknown”.\nBelow is the article.\n",
        "response_type": "string",
        "GPTModel": {
            "version": "gpt-4o-mini",
            "tokenLimit": 128000
        }
    }
}   